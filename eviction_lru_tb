module eviction_lru_tb;

//parameters for memory size and organization (in bits used to represent them)
parameter integer a_size = 4;

reg [1:0]t_array[4];
integer i;
integer k;
integer l;
integer j;
integer m;

integer index;
integer set;
integer way;
integer n;

reg [7:0]total_count; // 7 bits (count from 0-128)

wire [1:0]e_num;

//instantiate the module using out memory and organization inputs
eviction_lru #(.associativity(a_size)) t1(.tag_array(t_array), .evict_num(e_num)); 

//going left if 0. going right if 1.


function automatic left_or_right(int set);
    int way;
    for (way = 0; way < a_size; way = way + 1)
	if (t_array[set][way] === n)
	    e_num = way;
	    return(way);
	    
    for (way = 0; way < a_size; way = way + 1)	
	if (t_array[set][way] === n+1)
	    e_num = way;
	    return(way);
 
endfunction
endmodule
		
